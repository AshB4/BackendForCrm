# Generated by Django 5.0.3 on 2024-03-20 21:27

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('mybe', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('contact', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerOrder',
            fields=[
                ('order_id', models.IntegerField(primary_key=True, serialize=False)),
                ('listing_id', models.IntegerField()),
                ('customer', models.CharField(max_length=100)),
                ('quantity', models.IntegerField()),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentListing',
            fields=[
                ('listing_id', models.IntegerField(primary_key=True, serialize=False)),
                ('type_id', models.IntegerField()),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('year', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SalesRepresentative',
            fields=[
                ('rep_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('transaction_id', models.IntegerField(primary_key=True, serialize=False)),
                ('order_id', models.IntegerField()),
                ('payment_method', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(max_length=100)),
            ],
        ),
        migrations.DeleteModel(
            name='TodoItem',
        ),
    ]

### Explanation of Django Migration File:

#### Technical Perspective:

# 1. **Database Schema Changes:**
#    - This file is a Django migration, generated automatically to handle database schema changes.
   
# 2. **Dependencies:**
#    - It lists dependencies, indicating which previous migrations it relies on for proper execution.

# 3. **Model Creation:**
#    - Each `CreateModel` operation defines a new database table, specifying its fields (columns) and their characteristics such as data types and constraints.

# 4. **Model Deletion:**
#    - The `DeleteModel` operation removes a previously defined model from the database schema.

# #### Non-Technical Perspective:

# 1. **Updating Database Structure:**
#    - This file represents changes made to the database structure needed for the application.
   
# 2. **Creating New Tables:**
#    - Each `CreateModel` section defines a new type of data (e.g., customers, orders, equipment listings) that the application will manage.

# 3. **Removing Unused Feature:**
#    - The `DeleteModel` section removes a feature (in this case, a "TodoItem" model) that is no longer needed in the application.

# 4. **Ensuring Database Consistency:**
#    - By executing this migration, the application ensures that the database is consistent with the latest version of the application, allowing it to function correctly.

#  This is how database changes are managed and executed in the Django framework, ensuring the smooth operation of the application.

